@page "/"
@inject INotaRepository _notaService

<PageTitle>Home</PageTitle>
<main class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-12">
            <div class="card m-3" style="background-color:@CardColor;">
                <div class="card-body">
                    @if (NotaSorteada != null)
                    {
                        <h1>@NotaSorteada.Conteudo</h1>
                        <div class="text-end">
                            <p>@NotaSorteada.DataCriacao.ToString("dd/MM/yyyy")</p>
                        </div>
                    }
                    else
                    {
                        <p>Nenhuma nota sorteada ainda.</p>
                    }
                </div>
            </div>
            <div class="card m-3">
                <div class="card-body">
                    <p>Seja bem-vindo ao Diário da Gratidão. Aqui você pode registrar suas gratidões diárias.</p>
                </div>
                <img src="@ImageUrl" alt="Imagem carregada" class="img-fluid" />
            </div>
        </div>
    </div>
</main>

@code {
    private List<Nota> NotasList { get; set; } = new();
    private Nota NotaSorteada { get; set; }
    private string ImageUrl { get; set; } = "";
    private string CardColor { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await CarregaNotas();
        SortearNota();
        SortearCorDoCard();
        StateHasChanged(); // Força a atualização do estado
    }

    private async Task CarregaNotas()
    {
        var notas = await _notaService.GetAllNotasAsync();

        NotasList?.Clear();

        if (NotasList == null) return;

        foreach (var nota in notas)
            NotasList.Add(nota);
    }

    private void SortearNota()
    {
        if (NotasList != null && NotasList.Count > 0)
        {
            var random = new Random();
            int index = random.Next(NotasList.Count);
            NotaSorteada = NotasList[index];
        }
    }

    private void SortearCorDoCard()
    {
        var palette = GetSelectedPalette(); // Implementar a lógica para obter a paleta selecionada
        if (palette != null && palette.Colors.Count > 0)
        {
            var random = new Random();
            int index = random.Next(palette.Colors.Count);
            CardColor = palette.Colors[index];
        }
    }

    private Palette GetSelectedPalette()
    {
        // Implementar a lógica para obter a paleta de cores selecionada (ex.: do local storage, sessão, ou banco de dados)
        // ...
        return new Palette { Colors = new List<string> { "#FF5733", "#FFBD33", "#FF33F6" } }; // Exemplo de retorno
    }

    private class Palette
    {
        public List<string> Colors { get; set; }
    }
}
