@page "/notas"
@rendermode InteractiveServer

<div class="container">
    <div class="row">
        <div class="col-lg-10">
            <!-- barra de busca -->
            <input type="text" class="form-control" placeholder="Pesquisar por título" @oninput="@(e => FiltrarNotas(e.Value.ToString()))" />
        </div>
        <div class="col-md-10">
            <div class="card">
                @if (NotasF.Count > 0)
                {
                    <div class="card-header">
                        Lista de Notas
                    </div>
                    <div class="card-body">
                        <div style="max-height: 400px; overflow-y: auto;">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Conteudo</th>
                                        <th>DataCriacao</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var nota in NotasF)
                                    {
                                        <tr>
                                            <td>@nota.Conteudo</td>
                                            <td>@nota.DataCriacao</td>
                                            <td>
                                                <div class="hstack gap-2">
                                                    <button class="btn btn-info" @onclick="()=>EditarNota(nota)">Edita</button>
                                                    <button class="btn btn-danger" @onclick="() => DeletarNotaAsync(nota.Id)">Deleta</button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-info"> Nenhuma nota disponível </div>
                }
            </div>
        </div>
        <div class="col-12 mt-3">
            <div class="card">
                <div class="card-header">
                    <button class="btn btn-primary float-end"
                            @onclick="NavigateToAddNotaPage">
                        Nova Nota
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private List<Nota> NotasF { get; set; } = new();
    private List<Nota> NotasList { get; set; } = new(); // Lista completa de notas

    protected override async Task OnInitializedAsync()
    {
        await CarregarNotasAsync();
    }

    private async Task CarregarNotasAsync()
    {
        var notas = await _notaService.GetAllNotasAsync();
        NotasList = notas.OrderByDescending(n => n.DataCriacao).ToList();
        NotasF = NotasList.ToList();
    }

    private void FiltrarNotas(string conteudo)
    {
        if (string.IsNullOrEmpty(conteudo))
        {
            NotasF = NotasList.ToList();
        }
        else
        {
            NotasF = NotasList
                .Where(x => x.Conteudo.Contains(conteudo, StringComparison.OrdinalIgnoreCase))
                .OrderByDescending(x => x.DataCriacao)
                .ToList();
        }
    }

    private void NavigateToAddNotaPage()
    {
        _navigation.NavigateTo("manutencaonota");
    }

    private void EditarNota(Nota nota)
    {
        _navigation.NavigateTo($"manutencaonota/{nota.Id}");
    }

    private async Task DeletarNotaAsync(int id)
    {
        await _notaService.DeleteNotaAsync(id);
        await CarregarNotasAsync();
    }
}
