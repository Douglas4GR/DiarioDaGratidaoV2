@page "/notas"
@rendermode InteractiveServer

<div class="container">
    <div class="row">
        <div class="col-lg-10">
            <!-- barra de busca -->
            <input type="text" class="form-control" placeholder="Pesquisar por título" @oninput="@(e => PesquisaNota(e.Value.ToString()))" />
        </div>
        <div class="col-md-10">
            <div class="card">
                @if (NotasList.Count > 0)
                {
                    <div class="card-header">
                        Lista de Notas
                    </div>
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Conteudo</th>
                                    <th>DataCriacao</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var nota in NotasFiltradas)
                                {
                                    <tr>
                                        <td>@nota.Conteudo</td>
                                        <td>@nota.DataCriacao</td>
                                        <td>
                                            <div class="hstack gap-2">
                                                <button class="btn  btn-info" @onclick="()=>Edit(nota)"> Edita</button>
                                                <button class="btn  btn-danger" @onclick="() => Delete(nota.Id)"> Deleta</button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info"> Nenhuma nota disponível </div>
                }
            </div>
        </div>
        <div class="col-12 mt-3">
            <div class="card">
                <div class="card-header">
                    <button class="btn btn-primary float-end"
                            @onclick="NavigateToAddNotaPage">
                        Nova Nota
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Nota> NotasList { get; set; } = new();
    private List<Nota> NotasFiltradas { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await CarregaNotas();
    }

    private async Task CarregaNotas()
    {
        var notas = await _notaService.GetAllNotasAsync();

        NotasList?.Clear();
        NotasFiltradas?.Clear();

        if (NotasList is null) return;

        foreach (var nota in notas)
        {
            NotasList.Add(nota);
            NotasFiltradas.Add(nota);
        }
    }


    //pesquisar
    private void PesquisaNota(string cont)
    {
        if (string.IsNullOrEmpty(cont))
        {
            NotasFiltradas = NotasList.ToList();
        }
        else
        {
            NotasFiltradas = NotasList.Where(x => x.Conteudo.Contains(cont, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }


    //incluir
    private void NavigateToAddNotaPage()
    {
        _navigation.NavigateTo("manutencaonota");
    }

    //editar
    private void Edit(Nota model)
    {
        _navigation.NavigateTo($"manutencaonota/{model.Id}");
    }

    //deletar
    private async Task Delete(int id)
    {
        var nota = await _notaService.DeleteNotaAsync(id);
        await CarregaNotas();
    }
}